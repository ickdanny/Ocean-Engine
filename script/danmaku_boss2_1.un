# danmaku script for boss 2 demarcation rings

let numRings = 4;
let secsBetweenRings = 60.0 / 187.0;
let secsBetweenSpawns = secsBetweenRings * 4;

let initSpeed = 100;
let speedOffset = 50;

let ringAngleRange = 5.0;

let pos = getPosition();

func ringSymmetry(speed){
    return pow(speed, 0.4) * diff(3.5, 4.5, 5.5);
}

func spawnBulletA(vel, depthOffset){
    spawn(
        "sharp_orange",
        pos,
        vel,
        depthOffset,
        "bullet_boss2_1_a"
    );
}

func spawnBulletB(vel, depthOffset){
    spawn(
        "sharp_dpurple",
        pos,
        vel,
        depthOffset,
        "bullet_boss2_1_b"
    );
}

func spawnBulletC(vel, depthOffset){
    spawn(
        "sharp_purple",
        pos,
        vel,
        depthOffset,
        "bullet_boss2_1_a"
    );
}

func spawnBulletD(vel, depthOffset){
    spawn(
        "sharp_lpurple",
        pos,
        vel,
        depthOffset,
        "bullet_boss2_1_b"
    );
}

# hide weirdness to do with float symmetry
func getRingAngle(){
    return 270.0
        + random(-ringAngleRange, ringAngleRange);
}

func spawnRingA(speed){
    let symmetry = ringSymmetry(speed);
    let baseVel = <<speed, getRingAngle()>>;
    ring(baseVel, symmetry, spawnBulletA);
}

func spawnRingB(speed){
    let symmetry = ringSymmetry(speed);
    let baseVel = <<speed, getRingAngle()>>;
    ring(baseVel, symmetry, spawnBulletB);
}

func spawnRingC(speed){
    let symmetry = ringSymmetry(speed);
    let baseVel = <<speed, getRingAngle()>>;
    ring(baseVel, symmetry, spawnBulletC);
}

func spawnRingD(speed){
    let symmetry = ringSymmetry(speed);
    let baseVel = <<speed, getRingAngle()>>;
    ring(baseVel, symmetry, spawnBulletD);
}

while(true){
    # 3x normal ring spawns
    for(let i = 0; i < 3; i = i + 1){
        let speed = initSpeed;
        spawnRingA(speed);
        speed = speed + speedOffset;
        secTimer(secsBetweenRings);

        spawnRingB(speed);
        speed = speed + speedOffset;
        secTimer(secsBetweenRings);

        spawnRingC(speed);
        speed = speed + speedOffset;
        secTimer(secsBetweenRings);

        spawnRingD(speed);
        secTimer(secsBetweenRings);

        flagUser1();

        secTimer(secsBetweenSpawns);
    }

    # 1x mega ring spawn
    let speed = initSpeed;
    for(let i = 0; i < 2; i = i + 1){
        spawnRingA(speed);
        speed = speed + speedOffset;
        secTimer(secsBetweenRings);

        spawnRingB(speed);
        speed = speed + speedOffset;
        secTimer(secsBetweenRings);

        spawnRingC(speed);
        speed = speed + speedOffset;
        secTimer(secsBetweenRings);

        spawnRingD(speed);
        speed = speed + speedOffset;
        secTimer(secsBetweenRings);
    }
    secTimer(secsBetweenRings * 2);
    flagUser1();
    secTimer(secsBetweenSpawns * 4);
}